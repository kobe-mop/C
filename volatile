volatile用在如下的几个地方： 
1) 中断服务程序中修改的供其它程序检测的变量需要加volatile； 
2) 多任务环境下各任务间共享的标志应该加volatile； 
3) 存储器映射的硬件寄存器通常也要加volatile说明，因为每次对它的读写都可能由不同意义；


volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，
比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，
从而可以提供对特殊地址的稳定访问。声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，
系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。例如：

1	volatile int i=10;
2	int a = i;
3	...
4	// 其他代码，并未明确告诉编译器，对 i 进行过操作
5	int b = i;

volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。
而优化做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。
这样以来，如果 i是一个寄存器变量或者表示一个端口数据就容易出错，所以说 volatile 可以保证对特殊地址的稳定访问。


六．3个经典的volatile问题

1). 一个参数既可以是const还可以是volatile吗？解释为什么。
2). 一个指针可以是volatile 吗？解释为什么。
3). 下面的函数有什么错误：
int square(volatile int *ptr)
{
return *ptr * *ptr;
}
下面是答案：
1). 可以是。例如对于只读的状态寄存器而言，如果它仅仅是volatile类型，那么它还是可能被意想不到的改变。但它还是const的时候，程序就不应该试图去修改它
2). 可以是的。
尽管这种情况并不常见，但它还是可以。一个例子就是：
当一个中断服务子程序企图去修改一个指向一个buffer指针的时候。
3). 这段代码可能有点恶作剧的味道。但它很好说明volatile类型参数的含义和作用。
这段代码的目的是用来返指针*ptr所指向的值的平方，
但是，由于*ptr指向一个volatile型参数，编译器将产生类似下面的代码：
int square(volatile int *ptr)
{
int a,b;
a = *ptr;
b = *ptr;
return a * b;
}
由于*ptr的值可能被意想不到地该变，因此a和b可能是不同的。结果，这段代码可能返不
是你所期望的平方值！正确的代码如下：
long square(volatile int *ptr)
{
int a;
a = *ptr;
return a * a;
}

七．总结

1.使用volatile关键字修饰的变量，可以避免编译器优化；
2.使用volatile关键字修饰的变量，每次都是重新读取内存中的值，而不是使用保存在寄存器里的值了；
3.编译器优化的做法是：
int i = 5;
int a = i;
……
int b = i;
编译器发现两次从i读数据的代码之间，并没有对i进行过操作，它会自动把上次读的数据放在b中，而不是重新从i里面读。
